{"version":3,"sources":["components/Lists.js","components/Recipe.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Lists","ingredients","map","ingredient","className","text","weight","uuidv4","Recipe","recipe","useState","show","setShow","label","image","url","src","alt","href","target","rel","onClick","Alert","alert","App","input","setInput","recipes","setRecipes","setAlert","getData","a","Axios","get","result","data","more","console","log","hits","onSubmit","e","preventDefault","type","name","onChange","value","autoComplete","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAceA,EAXD,SAAC,GACb,OADiC,EAAlBC,YACIC,KAAI,SAAAC,GACrB,OACE,qBAAmBC,UAAU,kBAA7B,UACE,oBAAIA,UAAU,kBAAd,SAAiCD,EAAWE,OAC5C,qBAAID,UAAU,oBAAd,sBAA4CD,EAAWG,YAFhDC,mBCuBAC,EAzBA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA2CH,EAAOA,OAA1CI,EAAR,EAAQA,MAAOC,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,IAAKd,EAA3B,EAA2BA,YAM3B,OACE,sBAAKG,UAAU,SAAf,UACE,6BAAKS,IACL,qBAAKG,IAAKF,EAAOG,IAAKJ,IACtB,wBAAQT,UAAU,WAAlB,SACA,mBAAGc,KAAMH,EAAKI,OAAO,SAASC,IAAI,sBAAlC,yBAKA,wBAAQC,QAdQ,WAChBT,GAASD,IAaqBP,UAAU,QAAxC,yBAECO,GAAQ,cAAC,EAAD,CAAOV,YAAaA,QCdpBqB,EARD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACE,qBAAKnB,UAAU,QAAf,SACE,6BAAKmB,OC2DIC,G,MAzDH,WACV,MAA0Bd,mBAAS,IAAnC,mBAAOe,EAAP,KAAcC,EAAd,KACA,EAA8BhB,mBAAS,IAAvC,mBAAOiB,EAAP,KAAgBC,EAAhB,KACA,EAA0BlB,mBAAS,IAAnC,mBAAOa,EAAP,KAAcM,EAAd,KAIMd,EAAG,0CAAsCU,EAAtC,mBAFK,WAEL,oBADM,oCAGTK,EAAO,uCAAG,4BAAAC,EAAA,yDACA,KAAVN,EADU,iCAESO,IAAMC,IAAIlB,GAFnB,WAENmB,EAFM,QAGAC,KAAKC,KAHL,yCAIHP,EAAS,8BAJN,OAMZQ,QAAQC,IAAIJ,GACZN,EAAWM,EAAOC,KAAKI,MACvBb,EAAS,IACTG,EAAS,IATG,wBAWZA,EAAS,wBAXG,4CAAH,qDAqBb,OACI,qBAAKzB,UAAU,OAAf,SACE,sBAAKA,UAAU,MAAf,UACF,sDACA,uBAAMoC,SAVO,SAAAC,GACfA,EAAEC,iBACFZ,KAQ4B1B,UAAU,cAApC,UACa,KAAVmB,GAAgB,cAAC,EAAD,CAAOA,MAAOA,IAC/B,uBACEoB,KAAK,OACLC,KAAK,QACLC,SAVS,SAAAJ,GAAC,OAAIf,EAASe,EAAEtB,OAAO2B,QAWhCA,MAAOrB,EACPsB,aAAa,MACbC,YAAY,gBAEd,uBAAOL,KAAK,SAASG,MAAM,cAE7B,qBAAK1C,UAAU,UAAf,SAEGuB,IAAY,IACXA,EAAQzB,KAAI,SAAAO,GAAM,OAAI,cAAC,EAAD,CAAuBA,OAAQA,GAAlBF,oBAEvC,qBAAKH,UAAU,iBC9CN6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6d9c7103.chunk.js","sourcesContent":["import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst Lists = ({ ingredients }) => {\n  return ingredients.map(ingredient => {\n    return (\n      <ul key={uuidv4()} className=\"ingredient-list\">\n        <li className=\"ingredient-text\">{ingredient.text}</li>\n        <li className=\"ingredient-weight\">Weight - {ingredient.weight}</li>\n      </ul>\n    );\n  });\n};\n\nexport default Lists;","import React, { useState } from \"react\";\nimport Lists from \"./Lists\";\n\n\nconst Recipe = ({ recipe }) => {\n  const [show, setShow] = useState(false);\n  const { label, image, url, ingredients } = recipe.recipe;\n\n  const handleClick = () => {\n      setShow(!show);\n  }\n\n  return (\n    <div className=\"recipe\">\n      <h2>{label}</h2>\n      <img src={image} alt={label} />\n      <button className=\"moreinfo\">\n      <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n        More Info\n      </a>\n      </button> \n      {/* onClick the button will change the state value of show */}\n      <button onClick={handleClick} className=\"ingre\">Ingredients</button>\n      {/* if show equals true, then show the Lists component */}\n      {show && <Lists ingredients={ingredients} />}\n    </div>\n  );\n};\n\nexport default Recipe;","import React from \"react\";\n\nconst Alert = ({ alert }) => {\n  return (\n    <div className=\"alert\">\n      <h3>{alert}</h3>\n    </div>\n  );\n};\n\nexport default Alert;","import React, {useState} from 'react';\nimport Axios from 'axios';\nimport Recipe from './components/Recipe';\nimport Alert from './components/Alert';\nimport './App.css';\nimport { v4 as uuidv4 } from \"uuid\"; //used for the unique key\n\nconst App = () => {\n  const [input, setInput] = useState('');\n  const [recipes, setRecipes] = useState([]);\n  const [alert, setAlert] = useState(\"\");\n\n  const appId = \"1df910a5\";\n  const appKey = \"2a87bf35e2f61f77ad0ecc310d06635f\";\n  const url = `https://api.edamam.com/search?q=${input}&app_id=${appId}&app_key=${appKey}`;\n  \n  const getData = async () => {\n    if (input !== \"\") {\n      const result = await Axios.get(url);\n      if (!result.data.more) {\n        return setAlert(\"No related food are found\");\n      }\n      console.log(result);\n      setRecipes(result.data.hits);\n      setInput(\"\");\n      setAlert(\"\");\n    } else {\n      setAlert(\"Please fill the form\");\n    }\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    getData();\n  };\n\n  const onChange = e => setInput(e.target.value);\n  return (\n      <div className=\"main\">\n        <div className=\"App\">\n      <h3>Explore food recipes</h3>\n      <form onSubmit={onSubmit} className=\"search-form\">\n        {alert !== \"\" && <Alert alert={alert} />}\n        <input\n          type=\"text\"\n          name=\"query\"\n          onChange={onChange}\n          value={input}\n          autoComplete=\"off\"\n          placeholder=\"Search Food\"\n        />\n        <input type=\"submit\" value=\"Search\" />\n      </form>\n      <div className=\"recipes\">\n        {/* if recipes not equal to falsy, then show the Recipe component */}\n        {recipes !== [] &&\n          recipes.map(recipe => <Recipe key={uuidv4()} recipe={recipe} />)}\n      </div>\n      <div className=\"blank\"></div>\n    </div>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}