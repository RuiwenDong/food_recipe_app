{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nconst Updater_1 = require(\"./Particle/Updater\");\n\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nconst Enums_1 = require(\"../Enums\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst Infecter_1 = require(\"./Particle/Infecter\");\n\nconst Mover_1 = require(\"./Particle/Mover\");\n\nconst Vector_1 = require(\"./Particle/Vector\");\n\nclass Particle {\n  constructor(id, container, position, overrideOptions) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    this.id = id;\n    this.container = container;\n    this.links = [];\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.loops = {\n      opacity: 0,\n      size: 0\n    };\n    const pxRatio = container.retina.pixelRatio;\n    const options = container.actualOptions;\n    const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n    particlesOptions.load(options.particles);\n    const shapeType = particlesOptions.shape.type;\n    const reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      const shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        const shapeData = shapeOptions.options[this.shape];\n\n        if (shapeData) {\n          this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n      }\n    } else {\n      const shapeData = particlesOptions.shape.options[this.shape];\n\n      if (shapeData) {\n        this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n      }\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.pathDelay = Utils_1.NumberUtils.getValue(this.options.move.path.delay) * 1000;\n    this.wobbleDistance = 0;\n    container.retina.initParticle(this);\n    const color = this.options.color;\n    const sizeOptions = this.options.size;\n    const sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\n    const randomSize = typeof sizeOptions.random === \"boolean\" ? sizeOptions.random : sizeOptions.random.enable;\n    this.size = {\n      value: sizeValue\n    };\n    this.direction = Utils_1.NumberUtils.getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    const rotateOptions = this.options.rotate;\n    this.rotate = {\n      value: Utils_1.NumberUtils.getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    let rotateDirection = rotateOptions.direction;\n\n    if (rotateDirection === Enums_1.RotateDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n\n    switch (rotateDirection) {\n      case Enums_1.RotateDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.rotate.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.RotateDirection.clockwise:\n        this.rotate.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    const rotateAnimation = this.options.rotate.animation;\n\n    if (rotateAnimation.enable) {\n      this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!rotateAnimation.sync) {\n        this.rotate.velocity *= Math.random();\n      }\n    }\n\n    const tiltOptions = this.options.tilt;\n    this.tilt = {\n      value: Utils_1.NumberUtils.getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: Math.random() >= 0.5 ? 1 : -1,\n      cosDirection: Math.random() >= 0.5 ? 1 : -1\n    };\n    let tiltDirection = tiltOptions.direction;\n\n    if (tiltDirection === Enums_1.TiltDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n    }\n\n    switch (tiltDirection) {\n      case Enums_1.TiltDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.tilt.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.TiltDirection.clockwise:\n        this.tilt.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    const tiltAnimation = this.options.tilt.animation;\n\n    if (tiltAnimation.enable) {\n      this.tilt.velocity = tiltAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!tiltAnimation.sync) {\n        this.tilt.velocity *= Math.random();\n      }\n    }\n\n    const sizeAnimation = this.options.size.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n\n      if (!randomSize) {\n        switch (sizeAnimation.startValue) {\n          case Enums_1.StartValueType.min:\n            this.size.value = sizeAnimation.minimumValue * pxRatio;\n            break;\n\n          case Enums_1.StartValueType.random:\n            this.size.value = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(sizeAnimation.minimumValue * pxRatio, this.size.value));\n            break;\n\n          case Enums_1.StartValueType.max:\n          default:\n            this.size.status = Enums_1.AnimationStatus.decreasing;\n            break;\n        }\n      }\n\n      this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    const hslColor = Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates);\n\n    if (hslColor) {\n      this.color = {\n        h: {\n          value: hslColor.h\n        },\n        s: {\n          value: hslColor.s\n        },\n        l: {\n          value: hslColor.l\n        }\n      };\n      const colorAnimation = this.options.color.animation;\n      this.setColorAnimation(colorAnimation.h, this.color.h);\n      this.setColorAnimation(colorAnimation.s, this.color.s);\n      this.setColorAnimation(colorAnimation.l, this.color.l);\n    }\n\n    const rollOpt = this.options.roll;\n\n    if (rollOpt.enable) {\n      if (this.color) {\n        if (rollOpt.backColor) {\n          this.backColor = Utils_1.ColorUtils.colorToHsl(rollOpt.backColor);\n        } else if (rollOpt.darken.enable) {\n          this.backColor = {\n            h: this.color.h.value,\n            s: this.color.s.value,\n            l: this.color.l.value - rollOpt.darken.value\n          };\n        } else if (rollOpt.enlighten.enable) {\n          this.backColor = {\n            h: this.color.h.value,\n            s: this.color.s.value,\n            l: this.color.l.value + rollOpt.darken.value\n          };\n        }\n      }\n\n      this.rollAngle = Math.random() * Math.PI * 2;\n      this.rollSpeed = Utils_1.NumberUtils.getRangeValue(rollOpt.speed) / 360;\n    } else {\n      this.rollAngle = 0;\n      this.rollSpeed = 0;\n    }\n\n    const wobbleOpt = this.options.wobble;\n\n    if (wobbleOpt.enable) {\n      this.wobbleAngle = Math.random() * Math.PI * 2;\n      this.wobbleSpeed = Utils_1.NumberUtils.getRangeValue(wobbleOpt.speed) / 360;\n    } else {\n      this.wobbleAngle = 0;\n      this.wobbleSpeed = 0;\n    }\n\n    this.position = this.calcPosition(this.container, position);\n    this.initialPosition = this.position.copy();\n    this.offset = Vector_1.Vector.create(0, 0);\n    const opacityOptions = this.options.opacity;\n    const randomOpacity = typeof opacityOptions.random === \"boolean\" ? opacityOptions.random : opacityOptions.random.enable;\n    this.opacity = {\n      value: Utils_1.NumberUtils.getValue(opacityOptions)\n    };\n    const opacityAnimation = opacityOptions.animation;\n\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.AnimationStatus.increasing;\n\n      if (!randomOpacity) {\n        switch (opacityAnimation.startValue) {\n          case Enums_1.StartValueType.min:\n            this.opacity.value = opacityAnimation.minimumValue;\n            break;\n\n          case Enums_1.StartValueType.random:\n            this.opacity.value = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(opacityAnimation.minimumValue, this.opacity.value));\n            break;\n\n          case Enums_1.StartValueType.max:\n          default:\n            this.opacity.status = Enums_1.AnimationStatus.decreasing;\n            break;\n        }\n      }\n\n      this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;\n\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    const imageShape = this.loadImageShape(container, drawer);\n\n    if (imageShape) {\n      this.image = imageShape.image;\n      this.fill = imageShape.fill;\n      this.close = imageShape.close;\n    }\n\n    this.stroke = this.options.stroke instanceof Array ? Utils_1.Utils.itemFromArray(this.options.stroke, this.id, reduceDuplicates) : this.options.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    const strokeHslColor = (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n\n    if (strokeHslColor) {\n      this.strokeColor = {\n        h: {\n          value: strokeHslColor.h\n        },\n        s: {\n          value: strokeHslColor.s\n        },\n        l: {\n          value: strokeHslColor.l\n        }\n      };\n      const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n\n      if (strokeColorAnimation && this.strokeColor) {\n        this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n        this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n        this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n      }\n    }\n\n    const lifeOptions = particlesOptions.life;\n    this.lifeDelay = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n    this.lifeDelayTime = 0;\n    this.lifeDuration = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n    this.lifeTime = 0;\n    this.livesRemaining = particlesOptions.life.count;\n    this.spawning = this.lifeDelay > 0;\n\n    if (this.lifeDuration <= 0) {\n      this.lifeDuration = -1;\n    }\n\n    if (this.livesRemaining <= 0) {\n      this.livesRemaining = -1;\n    }\n\n    this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.options.shadow.color);\n    this.updater = new Updater_1.Updater(container, this);\n    this.infecter = new Infecter_1.Infecter(container);\n    this.mover = new Mover_1.Mover(container, this);\n\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n  }\n\n  move(delta) {\n    this.mover.move(delta);\n  }\n\n  update(delta) {\n    this.updater.update(delta);\n  }\n\n  draw(delta) {\n    this.container.canvas.drawParticle(this, delta);\n  }\n\n  getPosition() {\n    return this.position.add(this.offset);\n  }\n\n  getRadius() {\n    return this.bubble.radius || this.size.value;\n  }\n\n  getMass() {\n    const radius = this.getRadius();\n    return Math.pow(radius, 2) * Math.PI / 2;\n  }\n\n  getFillColor() {\n    if (this.bubble.color) {\n      return this.bubble.color;\n    }\n\n    if (this.backColor && Math.floor(this.rollAngle / (Math.PI / 2)) % 2) {\n      return this.backColor;\n    }\n\n    return Utils_1.ColorUtils.getHslFromAnimation(this.color);\n  }\n\n  getStrokeColor() {\n    var _a, _b;\n\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.ColorUtils.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n\n  destroy(override) {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    this.links = [];\n\n    if (this.unbreakable) {\n      return;\n    }\n\n    this.destroyed = true;\n    this.bubble.inRange = false;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n\n    if (override) {\n      return;\n    }\n\n    const destroyOptions = this.options.destroy;\n\n    if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n      this.split();\n    }\n  }\n\n  reset() {\n    this.loops.opacity = 0;\n    this.loops.size = 0;\n  }\n\n  split() {\n    const splitOptions = this.options.destroy.split;\n\n    if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n      return;\n    }\n\n    const rate = Utils_1.NumberUtils.getRangeValue(splitOptions.rate.value);\n\n    for (let i = 0; i < rate; i++) {\n      this.container.particles.addSplitParticle(this);\n    }\n  }\n\n  setColorAnimation(colorAnimation, colorValue) {\n    if (colorAnimation.enable) {\n      colorValue.velocity = colorAnimation.speed / 100 * this.container.retina.reduceFactor;\n\n      if (colorAnimation.sync) {\n        return;\n      }\n\n      colorValue.status = Enums_1.AnimationStatus.increasing;\n      colorValue.velocity *= Math.random();\n\n      if (colorValue.value) {\n        colorValue.value *= Math.random();\n      }\n    } else {\n      colorValue.velocity = 0;\n    }\n  }\n\n  calcPosition(container, position, tryCount = 0) {\n    var _a, _b;\n\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return Vector_1.Vector.create(pluginPos.x, pluginPos.y);\n      }\n    }\n\n    const canvasSize = container.canvas.size;\n    const pos = Vector_1.Vector.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height);\n    const outMode = this.options.move.outMode;\n\n    if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n      if (pos.x > container.canvas.size.width - this.size.value * 2) {\n        pos.x -= this.size.value;\n      } else if (pos.x < this.size.value * 2) {\n        pos.x += this.size.value;\n      }\n    }\n\n    if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n      if (pos.y > container.canvas.size.height - this.size.value * 2) {\n        pos.y -= this.size.value;\n      } else if (pos.y < this.size.value * 2) {\n        pos.y += this.size.value;\n      }\n    }\n\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, tryCount + 1);\n    }\n\n    return pos;\n  }\n\n  checkOverlap(pos, tryCount = 0) {\n    const overlapOptions = this.options.collisions.overlap;\n\n    if (!overlapOptions.enable) {\n      const retries = overlapOptions.retries;\n\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"Particle is overlapping and can't be placed\");\n      }\n\n      let overlaps = false;\n\n      for (const particle of this.container.particles.array) {\n        if (Utils_1.NumberUtils.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n          overlaps = true;\n          break;\n        }\n      }\n\n      return overlaps;\n    }\n\n    return false;\n  }\n\n  calculateVelocity() {\n    const baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this.direction);\n    const res = baseVelocity.copy();\n    const moveOptions = this.options.move;\n    const rad = Math.PI / 180 * moveOptions.angle.value;\n    const radOffset = Math.PI / 180 * moveOptions.angle.offset;\n    const range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n\n    if (!moveOptions.straight) {\n      res.angle += Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(range.left, range.right));\n    }\n\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= Math.random();\n    }\n\n    return res;\n  }\n\n  loadImageShape(container, drawer) {\n    var _a, _b, _c, _d, _e;\n\n    if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n      return;\n    }\n\n    const imageDrawer = drawer;\n    const images = imageDrawer.getImages(container).images;\n    const imageData = this.shapeData;\n    const image = (_a = images.find(t => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n    const color = this.getFillColor();\n    let imageRes;\n\n    if (!image) {\n      return;\n    }\n\n    if (image.svgData !== undefined && imageData.replaceColor && color) {\n      const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n      const svg = new Blob([svgColoredData], {\n        type: \"image/svg+xml\"\n      });\n      const domUrl = URL || window.URL || window.webkitURL || window;\n      const url = domUrl.createObjectURL(svg);\n      const img = new Image();\n      imageRes = {\n        data: Object.assign(Object.assign({}, image), {\n          svgData: svgColoredData\n        }),\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n        source: imageData.src\n      };\n      img.addEventListener(\"load\", () => {\n        if (this.image) {\n          this.image.loaded = true;\n          image.element = img;\n        }\n\n        domUrl.revokeObjectURL(url);\n      });\n      img.addEventListener(\"error\", () => {\n        domUrl.revokeObjectURL(url);\n        Utils_1.Utils.loadImage(imageData.src).then(img2 => {\n          if (this.image && img2) {\n            image.element = img2.element;\n            this.image.loaded = true;\n          }\n        });\n      });\n      img.src = url;\n    } else {\n      imageRes = {\n        data: image,\n        loaded: true,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n        source: imageData.src\n      };\n    }\n\n    if (!imageRes.ratio) {\n      imageRes.ratio = 1;\n    }\n\n    const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n    const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n    return {\n      image: imageRes,\n      fill,\n      close\n    };\n  }\n\n}\n\nexports.Particle = Particle;","map":{"version":3,"sources":["/Users/drw/Documents/food_recipe_app/node_modules/tsparticles/Core/Particle.js"],"names":["Object","defineProperty","exports","value","Particle","Updater_1","require","ParticlesOptions_1","Shape_1","Enums_1","Utils_1","Infecter_1","Mover_1","Vector_1","constructor","id","container","position","overrideOptions","_a","_b","_c","_d","_e","_f","_g","_h","_j","links","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","loops","opacity","size","pxRatio","retina","pixelRatio","options","actualOptions","particlesOptions","ParticlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","Utils","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","deepExtend","undefined","pathDelay","NumberUtils","getValue","move","path","delay","wobbleDistance","initParticle","color","sizeOptions","sizeValue","randomSize","random","enable","direction","getParticleDirectionAngle","bubble","inRange","initialVelocity","calculateVelocity","velocity","copy","rotateOptions","rotate","getRangeValue","Math","PI","rotateDirection","RotateDirection","index","floor","counterClockwise","clockwise","status","AnimationStatus","decreasing","increasing","rotateAnimation","animation","speed","reduceFactor","sync","tiltOptions","tilt","sinDirection","cosDirection","tiltDirection","TiltDirection","tiltAnimation","sizeAnimation","startValue","StartValueType","min","minimumValue","randomInRange","setRangeValue","max","sizeAnimationSpeed","hslColor","ColorUtils","colorToHsl","h","s","l","colorAnimation","setColorAnimation","rollOpt","roll","backColor","darken","enlighten","rollAngle","rollSpeed","wobbleOpt","wobble","wobbleAngle","wobbleSpeed","calcPosition","initialPosition","offset","Vector","create","opacityOptions","randomOpacity","opacityAnimation","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","sideCountFunc","getSidesCount","imageShape","loadImageShape","image","stroke","strokeWidth","width","strokeHslColor","getFillColor","strokeColor","strokeColorAnimation","lifeOptions","life","lifeDelay","lifeDelayTime","lifeDuration","duration","lifeTime","livesRemaining","count","spawning","shadowColor","colorToRgb","shadow","updater","Updater","infecter","Infecter","mover","Mover","particleInit","delta","update","draw","canvas","drawParticle","getPosition","add","getRadius","radius","getMass","pow","getHslFromAnimation","getStrokeColor","destroy","override","plugin","plugins","particleDestroyed","destroyOptions","mode","DestroyMode","split","reset","splitOptions","rate","i","addSplitParticle","colorValue","tryCount","pluginPos","particlePosition","x","y","canvasSize","pos","height","outMode","isInArray","OutMode","bounce","bounceHorizontal","bounceVertical","checkOverlap","overlapOptions","collisions","overlap","retries","Error","overlaps","particle","array","getDistance","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","angle","radOffset","range","left","right","straight","length","ShapeType","images","imageDrawer","getImages","imageData","find","t","source","src","imageRes","svgData","replaceColor","svgColoredData","replaceColorSvg","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","img","Image","data","assign","loaded","ratio","replace_color","addEventListener","element","revokeObjectURL","loadImage","then","img2"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particle = void 0;\nconst Updater_1 = require(\"./Particle/Updater\");\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Infecter_1 = require(\"./Particle/Infecter\");\nconst Mover_1 = require(\"./Particle/Mover\");\nconst Vector_1 = require(\"./Particle/Vector\");\nclass Particle {\n    constructor(id, container, position, overrideOptions) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        this.id = id;\n        this.container = container;\n        this.links = [];\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.loops = {\n            opacity: 0,\n            size: 0,\n        };\n        const pxRatio = container.retina.pixelRatio;\n        const options = container.actualOptions;\n        const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n        particlesOptions.load(options.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape_1.Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                const shapeData = shapeOptions.options[this.shape];\n                if (shapeData) {\n                    this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array\n                        ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates)\n                        : shapeData);\n                }\n            }\n        }\n        else {\n            const shapeData = particlesOptions.shape.options[this.shape];\n            if (shapeData) {\n                this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n            }\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        this.pathDelay = Utils_1.NumberUtils.getValue(this.options.move.path.delay) * 1000;\n        this.wobbleDistance = 0;\n        container.retina.initParticle(this);\n        const color = this.options.color;\n        const sizeOptions = this.options.size;\n        const sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\n        const randomSize = typeof sizeOptions.random === \"boolean\" ? sizeOptions.random : sizeOptions.random.enable;\n        this.size = {\n            value: sizeValue,\n        };\n        this.direction = Utils_1.NumberUtils.getParticleDirectionAngle(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const rotateOptions = this.options.rotate;\n        this.rotate = {\n            value: (Utils_1.NumberUtils.getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === Enums_1.RotateDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n        }\n        switch (rotateDirection) {\n            case Enums_1.RotateDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.rotate.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.RotateDirection.clockwise:\n                this.rotate.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const rotateAnimation = this.options.rotate.animation;\n        if (rotateAnimation.enable) {\n            this.rotate.velocity = (rotateAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                this.rotate.velocity *= Math.random();\n            }\n        }\n        const tiltOptions = this.options.tilt;\n        this.tilt = {\n            value: (Utils_1.NumberUtils.getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: Math.random() >= 0.5 ? 1 : -1,\n            cosDirection: Math.random() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === Enums_1.TiltDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n        }\n        switch (tiltDirection) {\n            case Enums_1.TiltDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.tilt.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.TiltDirection.clockwise:\n                this.tilt.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const tiltAnimation = this.options.tilt.animation;\n        if (tiltAnimation.enable) {\n            this.tilt.velocity = (tiltAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                this.tilt.velocity *= Math.random();\n            }\n        }\n        const sizeAnimation = this.options.size.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = Enums_1.AnimationStatus.increasing;\n            if (!randomSize) {\n                switch (sizeAnimation.startValue) {\n                    case Enums_1.StartValueType.min:\n                        this.size.value = sizeAnimation.minimumValue * pxRatio;\n                        break;\n                    case Enums_1.StartValueType.random:\n                        this.size.value = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(sizeAnimation.minimumValue * pxRatio, this.size.value));\n                        break;\n                    case Enums_1.StartValueType.max:\n                    default:\n                        this.size.status = Enums_1.AnimationStatus.decreasing;\n                        break;\n                }\n            }\n            this.size.velocity =\n                (((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        const hslColor = Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates);\n        if (hslColor) {\n            this.color = {\n                h: {\n                    value: hslColor.h,\n                },\n                s: {\n                    value: hslColor.s,\n                },\n                l: {\n                    value: hslColor.l,\n                },\n            };\n            const colorAnimation = this.options.color.animation;\n            this.setColorAnimation(colorAnimation.h, this.color.h);\n            this.setColorAnimation(colorAnimation.s, this.color.s);\n            this.setColorAnimation(colorAnimation.l, this.color.l);\n        }\n        const rollOpt = this.options.roll;\n        if (rollOpt.enable) {\n            if (this.color) {\n                if (rollOpt.backColor) {\n                    this.backColor = Utils_1.ColorUtils.colorToHsl(rollOpt.backColor);\n                }\n                else if (rollOpt.darken.enable) {\n                    this.backColor = {\n                        h: this.color.h.value,\n                        s: this.color.s.value,\n                        l: this.color.l.value - rollOpt.darken.value,\n                    };\n                }\n                else if (rollOpt.enlighten.enable) {\n                    this.backColor = {\n                        h: this.color.h.value,\n                        s: this.color.s.value,\n                        l: this.color.l.value + rollOpt.darken.value,\n                    };\n                }\n            }\n            this.rollAngle = Math.random() * Math.PI * 2;\n            this.rollSpeed = Utils_1.NumberUtils.getRangeValue(rollOpt.speed) / 360;\n        }\n        else {\n            this.rollAngle = 0;\n            this.rollSpeed = 0;\n        }\n        const wobbleOpt = this.options.wobble;\n        if (wobbleOpt.enable) {\n            this.wobbleAngle = Math.random() * Math.PI * 2;\n            this.wobbleSpeed = Utils_1.NumberUtils.getRangeValue(wobbleOpt.speed) / 360;\n        }\n        else {\n            this.wobbleAngle = 0;\n            this.wobbleSpeed = 0;\n        }\n        this.position = this.calcPosition(this.container, position);\n        this.initialPosition = this.position.copy();\n        this.offset = Vector_1.Vector.create(0, 0);\n        const opacityOptions = this.options.opacity;\n        const randomOpacity = typeof opacityOptions.random === \"boolean\" ? opacityOptions.random : opacityOptions.random.enable;\n        this.opacity = {\n            value: Utils_1.NumberUtils.getValue(opacityOptions),\n        };\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            this.opacity.status = Enums_1.AnimationStatus.increasing;\n            if (!randomOpacity) {\n                switch (opacityAnimation.startValue) {\n                    case Enums_1.StartValueType.min:\n                        this.opacity.value = opacityAnimation.minimumValue;\n                        break;\n                    case Enums_1.StartValueType.random:\n                        this.opacity.value = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(opacityAnimation.minimumValue, this.opacity.value));\n                        break;\n                    case Enums_1.StartValueType.max:\n                    default:\n                        this.opacity.status = Enums_1.AnimationStatus.decreasing;\n                        break;\n                }\n            }\n            this.opacity.velocity = (opacityAnimation.speed / 100) * container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                this.opacity.velocity *= Math.random();\n            }\n        }\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        const imageShape = this.loadImageShape(container, drawer);\n        if (imageShape) {\n            this.image = imageShape.image;\n            this.fill = imageShape.fill;\n            this.close = imageShape.close;\n        }\n        this.stroke =\n            this.options.stroke instanceof Array\n                ? Utils_1.Utils.itemFromArray(this.options.stroke, this.id, reduceDuplicates)\n                : this.options.stroke;\n        this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n        const strokeHslColor = (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n        if (strokeHslColor) {\n            this.strokeColor = {\n                h: {\n                    value: strokeHslColor.h,\n                },\n                s: {\n                    value: strokeHslColor.s,\n                },\n                l: {\n                    value: strokeHslColor.l,\n                },\n            };\n            const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n            if (strokeColorAnimation && this.strokeColor) {\n                this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n                this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n                this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n            }\n        }\n        const lifeOptions = particlesOptions.life;\n        this.lifeDelay = container.retina.reduceFactor\n            ? ((Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                container.retina.reduceFactor) *\n                1000\n            : 0;\n        this.lifeDelayTime = 0;\n        this.lifeDuration = container.retina.reduceFactor\n            ? ((Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                container.retina.reduceFactor) *\n                1000\n            : 0;\n        this.lifeTime = 0;\n        this.livesRemaining = particlesOptions.life.count;\n        this.spawning = this.lifeDelay > 0;\n        if (this.lifeDuration <= 0) {\n            this.lifeDuration = -1;\n        }\n        if (this.livesRemaining <= 0) {\n            this.livesRemaining = -1;\n        }\n        this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.options.shadow.color);\n        this.updater = new Updater_1.Updater(container, this);\n        this.infecter = new Infecter_1.Infecter(container);\n        this.mover = new Mover_1.Mover(container, this);\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n    }\n    move(delta) {\n        this.mover.move(delta);\n    }\n    update(delta) {\n        this.updater.update(delta);\n    }\n    draw(delta) {\n        this.container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return this.position.add(this.offset);\n    }\n    getRadius() {\n        return this.bubble.radius || this.size.value;\n    }\n    getMass() {\n        const radius = this.getRadius();\n        return (Math.pow(radius, 2) * Math.PI) / 2;\n    }\n    getFillColor() {\n        if (this.bubble.color) {\n            return this.bubble.color;\n        }\n        if (this.backColor && Math.floor(this.rollAngle / (Math.PI / 2)) % 2) {\n            return this.backColor;\n        }\n        return Utils_1.ColorUtils.getHslFromAnimation(this.color);\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.ColorUtils.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.links = [];\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n            this.split();\n        }\n    }\n    reset() {\n        this.loops.opacity = 0;\n        this.loops.size = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = Utils_1.NumberUtils.getRangeValue(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    setColorAnimation(colorAnimation, colorValue) {\n        if (colorAnimation.enable) {\n            colorValue.velocity = (colorAnimation.speed / 100) * this.container.retina.reduceFactor;\n            if (colorAnimation.sync) {\n                return;\n            }\n            colorValue.status = Enums_1.AnimationStatus.increasing;\n            colorValue.velocity *= Math.random();\n            if (colorValue.value) {\n                colorValue.value *= Math.random();\n            }\n        }\n        else {\n            colorValue.velocity = 0;\n        }\n    }\n    calcPosition(container, position, tryCount = 0) {\n        var _a, _b;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector_1.Vector.create(pluginPos.x, pluginPos.y);\n            }\n        }\n        const canvasSize = container.canvas.size;\n        const pos = Vector_1.Vector.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height);\n        const outMode = this.options.move.outMode;\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n            if (pos.x > container.canvas.size.width - this.size.value * 2) {\n                pos.x -= this.size.value;\n            }\n            else if (pos.x < this.size.value * 2) {\n                pos.x += this.size.value;\n            }\n        }\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n            if (pos.y > container.canvas.size.height - this.size.value * 2) {\n                pos.y -= this.size.value;\n            }\n            else if (pos.y < this.size.value * 2) {\n                pos.y += this.size.value;\n            }\n        }\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const overlapOptions = this.options.collisions.overlap;\n        if (!overlapOptions.enable) {\n            const retries = overlapOptions.retries;\n            if (retries >= 0 && tryCount > retries) {\n                throw new Error(\"Particle is overlapping and can't be placed\");\n            }\n            let overlaps = false;\n            for (const particle of this.container.particles.array) {\n                if (Utils_1.NumberUtils.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n                    overlaps = true;\n                    break;\n                }\n            }\n            return overlaps;\n        }\n        return false;\n    }\n    calculateVelocity() {\n        const baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        const rad = (Math.PI / 180) * moveOptions.angle.value;\n        const radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadImageShape(container, drawer) {\n        var _a, _b, _c, _d, _e;\n        if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n            return;\n        }\n        const imageDrawer = drawer;\n        const images = imageDrawer.getImages(container).images;\n        const imageData = this.shapeData;\n        const image = (_a = images.find((t) => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n        const color = this.getFillColor();\n        let imageRes;\n        if (!image) {\n            return;\n        }\n        if (image.svgData !== undefined && imageData.replaceColor && color) {\n            const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n            const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" });\n            const domUrl = URL || window.URL || window.webkitURL || window;\n            const url = domUrl.createObjectURL(svg);\n            const img = new Image();\n            imageRes = {\n                data: Object.assign(Object.assign({}, image), { svgData: svgColoredData }),\n                loaded: false,\n                ratio: imageData.width / imageData.height,\n                replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n                source: imageData.src,\n            };\n            img.addEventListener(\"load\", () => {\n                if (this.image) {\n                    this.image.loaded = true;\n                    image.element = img;\n                }\n                domUrl.revokeObjectURL(url);\n            });\n            img.addEventListener(\"error\", () => {\n                domUrl.revokeObjectURL(url);\n                Utils_1.Utils.loadImage(imageData.src).then((img2) => {\n                    if (this.image && img2) {\n                        image.element = img2.element;\n                        this.image.loaded = true;\n                    }\n                });\n            });\n            img.src = url;\n        }\n        else {\n            imageRes = {\n                data: image,\n                loaded: true,\n                ratio: imageData.width / imageData.height,\n                replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n                source: imageData.src,\n            };\n        }\n        if (!imageRes.ratio) {\n            imageRes.ratio = 1;\n        }\n        const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n        const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n        return {\n            image: imageRes,\n            fill,\n            close,\n        };\n    }\n}\nexports.Particle = Particle;\n"]},"metadata":{},"sourceType":"script"}